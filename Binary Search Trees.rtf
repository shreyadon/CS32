{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 I. Binary Search Trees\
--  ------ ------ -----\
\
   A. One of the two main ways to implement a map of significant size where\
      modification is needed is to use a binary search tree.\
\
   B. Definition: a binary search tree is a binary tree in which each node\
      contains a value (called a key) that is a member of a well-ordered\
      set.  Further, if p is a poiner to a node, then p -> _key >= every key \
      in the node's left subtree, and and p -> _key <= every key in the\
      node's right subtree.\
\
   C. Observe: if one traverses a binary search tree in inorder, the nodes\
      are visited in ascending order of the keys.\
\
        Ex:     DOG\
               /   \\\
            BISON  FOX\
            /   \\\
    AARDVARK   CAT\
\
       is a binary search tree.  Its inorder traversal is:\
\
        AARDVARK BISON CAT DOG FOX\
\
II. Operations on Binary Search Trees\
--  ---------- -- ------ ------ -----\
\
   A. The utility of binary search trees comes from the fact that the\
      operations of insert, lookup, and delete the node containing a certain\
      key all take time proportional to the height of the tree.  \
\
      1. If the tree is well balanced, then its height will be proportional to \
         the logarithm of the number of nodes.\
\
         a. Observe that, in a perfect binary tree, there are twice as many\
            nodes at each level as there are at the preceeding level (since each\
            node has two children.)  Thus, the number of nodes in the\
            tree grows as 2^height - which makes the height proportional\
            to log number of nodes.  (You will develop a more formal proof\
            of this for a homework.)\
\
         b. If keys are inserted into a binary tree in random order, the\
            resultant tree will not be perfect, of course; but the height will\
            still be proportional to log n.  (This can be shown\
            experimentally)\
\page \
      2. To see the utility of this, we can compare the average number of steps \
         needed for various operations on various search structures, assuming \
         that, in each case, the structure contains 1000 elements:\
\
        structure       insert          delete          lookup\
\
        pile              1             500             500\
        ordered array   500             500              10 [binary search]\
        (unordered)       1             500             500\
         linked list\
        binary search    10              10              10\
         tree - if\
         balanced\
\
   B. Algorithms for binary search trees:\
\
      1. Finding a node containing a given key:\
\
         PROJECT Code for lookup (recursive and non-recursive versions)\
\
         Observe: This algorithm (in either form), requires a number of steps\
                  proportional to the height of the tree.\
\
      2. Inserting a new key - simplest form:\
\
         PROJECT Code for insert (recursive and non-recursive versions)\
\
         a. Observe: This algorithm (in either form), requires a number of steps\
            proportional to the height of the tree.\
\
         b. Observe that this insertion algorithm, while very simple, could\
            lead to a highly non-optimal tree.\
\
            Ex: Consider what happens if keys are presented in reverse order:\
\
                FOX  DOG  CAT  BISON  AARDVARK\
\
            But note that the same thing happens when they are presented in\
            forward order!\
\
                AARDVARK BISON CAT DOG FOX\
\
         c. When we come to balanced binary search trees in a week or so, we \
            will see that there are several relatively simple way to avoid such \
            problems - leading to the ability to guarantee that the height of \
            tree will never be more than a fixed (small) multiple of log n.\
\
      3. Deletion: This is a bit more complex than the other two operations.\
\
         a. If the node we are removing has no children, it can be deleted\
            and the pointer to it in its parent can be set to NULL.\
\
         b. If the node has one child, that one child can become the child\
            of the parent of the removed node (the grandparent adopts the \
            grandchild)\
\page \
         c. But if the node being removed has two children, life is more\
            complex.  Our basic goal is to guarantee that the resultant\
            tree has the same inorder traversal as the original tree - minus\
            the removed node.\
\
                Observe: let the inorder traversal of the original tree be as\
                         follows, where D is the node being removed, P is its\
                         inorder predecessor, and S is its inorder successor:\
\
                        ... P D S ...\
\
                what we want is a tree that traverses as follows:\
\
                        ... P S ...\
\
                Observe: P is in D's left subtree, and S is in D's right\
                         subtree.\
\
                Observe: P cannot have a right child, and S cannot have a\
                         left child.  (D is the inorder successor of P, and is \
                         above P in the tree.  If P had an rchild, P's inorder\
                         successor would lie in P's right subtree.  A similar \
                         argument holds for S)\
\
                Therfore: what we can do is arbitrarily choose either P or S,\
                          copy its data up to node D, and then remove P or S\
                          as the case may be.  (Since P and S have a maximum\
                          of one child, removing either is less difficult.)\
\
        PROJECT Code for remove (recursive implementation only)\
\
        Observe: This algorithm requires a number of steps proportional to the \
                 height of the tree.\
}