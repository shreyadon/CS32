{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab543
\pard\tx543\pardeftab543\pardirnatural\partightenfactor0

\f0\b\fs22 \cf0 \CocoaLigature0 2.\
the first twelve Coords popped:\
6,4\
6,3\
6,5\
7,5\
8,5\
8,6\
8,7\
8,8\
7,8\
6,6\
5,4\
4,4\
4.\
the first twelve Coords popped:\
6,4\
5,4\
6,5\
6,3\
4,4\
6,6\
7,5\
3,4\
4,5\
8,5\
2,4\
4,6\
\
\pard\pardeftab720\sl280\partightenfactor0

\f1\b0\fs24 \cf2 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec2 How do the two algorithms differ from each other? (Hint: how and why do they visit cells in the maze in a different order?)\
In Problem 1/2, the algorithm uses stacks and we check the surroundings of the starting coordinate and push each checked coordinate on to the stack, in the next iteration of the loop we check the surroundings of the coordinate we pushed on to the stack last.\
In Problem 3/4, the algorithm uses queues and \cf0 \outl0\strokewidth0 we check the surroundings of the starting coordinate and push each checked coordinate on to the stack, in the next iteration of the loop we check the surroundings of the coordinate we pushed on to the stack first. }